 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var mongodb = require('mongodb');
var sites = null;
var APP_URL = "https://rust-sphere-url-shortener.glitch.me/";

function generateLink(url, res, callback) {
    // Gather all existing links    
    sites.find().toArray((err, data) => {
      if (err) return callback(err);

      // Put all short links in an array
      var urlList = data.map((obj) => {
        return obj.short_url;
      });

      var newLink;
      // Generate link and check for uniqueness
      do {
        // Generates random four digit number for link
        var num = Math.floor(100000 + Math.random() * 900000);
        newLink = APP_URL + num.toString().substring(0, 4);
      } while (urlList.indexOf(newLink) != -1);

      return callback(null, url, newLink, res);
    });
  }

  function findURL(link, res) {
    // Check to see if the site is already there        
    sites.findOne({
      "short_url": link
    }, function(err, result) {
      if (err) throw err;
      // object of the url
      if (result) {
        // we have a result
        console.log('Found ' + result);
        console.log('Redirecting to: ' + result.original_url);
        res.redirect(result.original_url);
      } else {
        // we don't
        res.send({
        "error": link + " is not on the database."
      });
      }
    });
  }

function save(err, url, newLink, res) {
    if (err) throw err;

    // Create new object
    var urlObj = {
      "original_url": url,
      "short_url": newLink
    };

    // Save object into db.
    sites.save(urlObj, function(err, result) {
      if (err) throw err;

      // Send response object      
      res.send({
        "original_url": url,
        "short_url": newLink
      });
      console.log('Saved ' + result);
    });
}

function getRequest(req, res) {
  var url = APP_URL + req.params.url;  
  findURL(url, res);  
}

function postRequest(req, res) {
  // Create short url, store and display the info.  
  var url = req.url.slice(5);
  console.log('URL ' + url);
  var urlObj = {};
  var regex = /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,}))\.?)(?::\d{2,5})?(?:[/?#]\S*)?$/i;    
  if ( regex.test(url)) {
    // Generate link, save in db and send response
    generateLink(url, res, save);
  } else {
    urlObj = {
      "error": "Incorrect url format."
    };
    res.send(urlObj);
  }
}  

// Connect to MongoDB and retrieve collection of sites
mongodb.MongoClient.connect('mongodb://localhost:27017/url-shortener', function(err, db) {
  
  if (err) {
    throw new Error('Database failed to connect!');
  } else {
    console.log('Successfully connected to MongoDB on port 27017.');
  }
  
  // Create collection of sites 
  db.createCollection("sites", 
  {
    capped: true,
    size: 5242880,
    max: 5000 }) 
  
  // Assign collection of sites
  sites = db.collection('sites');  
});

// GET/POST requests for URL shortener}
app.get('/new/:url*', postRequest)
app.get('/:url*', getRequest)


if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log('Origin: ' + origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })


// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

